// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: potechi.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_potechi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_potechi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015008 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_potechi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_potechi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_potechi_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_potechi_2eproto_metadata_getter(int index);
namespace potechi {
class CountingReply;
struct CountingReplyDefaultTypeInternal;
extern CountingReplyDefaultTypeInternal _CountingReply_default_instance_;
class CountingRequest;
struct CountingRequestDefaultTypeInternal;
extern CountingRequestDefaultTypeInternal _CountingRequest_default_instance_;
class VoteReply;
struct VoteReplyDefaultTypeInternal;
extern VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
class VoteReply_ResultEntry_DoNotUse;
struct VoteReply_ResultEntry_DoNotUseDefaultTypeInternal;
extern VoteReply_ResultEntry_DoNotUseDefaultTypeInternal _VoteReply_ResultEntry_DoNotUse_default_instance_;
class VoteRequest;
struct VoteRequestDefaultTypeInternal;
extern VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
}  // namespace potechi
PROTOBUF_NAMESPACE_OPEN
template<> ::potechi::CountingReply* Arena::CreateMaybeMessage<::potechi::CountingReply>(Arena*);
template<> ::potechi::CountingRequest* Arena::CreateMaybeMessage<::potechi::CountingRequest>(Arena*);
template<> ::potechi::VoteReply* Arena::CreateMaybeMessage<::potechi::VoteReply>(Arena*);
template<> ::potechi::VoteReply_ResultEntry_DoNotUse* Arena::CreateMaybeMessage<::potechi::VoteReply_ResultEntry_DoNotUse>(Arena*);
template<> ::potechi::VoteRequest* Arena::CreateMaybeMessage<::potechi::VoteRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace potechi {

// ===================================================================

class VoteRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:potechi.VoteRequest) */ {
 public:
  inline VoteRequest() : VoteRequest(nullptr) {}
  virtual ~VoteRequest();
  explicit constexpr VoteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteRequest(const VoteRequest& from);
  VoteRequest(VoteRequest&& from) noexcept
    : VoteRequest() {
    *this = ::std::move(from);
  }

  inline VoteRequest& operator=(const VoteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteRequest& operator=(VoteRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteRequest* internal_default_instance() {
    return reinterpret_cast<const VoteRequest*>(
               &_VoteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VoteRequest& a, VoteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoteRequest* New() const final {
    return CreateMaybeMessage<VoteRequest>(nullptr);
  }

  VoteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoteRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoteRequest& from);
  void MergeFrom(const VoteRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "potechi.VoteRequest";
  }
  protected:
  explicit VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_potechi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlavorNumbersFieldNumber = 1,
    kVoterNameFieldNumber = 2,
  };
  // repeated int32 flavor_numbers = 1;
  int flavor_numbers_size() const;
  private:
  int _internal_flavor_numbers_size() const;
  public:
  void clear_flavor_numbers();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flavor_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_flavor_numbers() const;
  void _internal_add_flavor_numbers(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_flavor_numbers();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 flavor_numbers(int index) const;
  void set_flavor_numbers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_flavor_numbers(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      flavor_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_flavor_numbers();

  // string voter_name = 2;
  void clear_voter_name();
  const std::string& voter_name() const;
  void set_voter_name(const std::string& value);
  void set_voter_name(std::string&& value);
  void set_voter_name(const char* value);
  void set_voter_name(const char* value, size_t size);
  std::string* mutable_voter_name();
  std::string* release_voter_name();
  void set_allocated_voter_name(std::string* voter_name);
  private:
  const std::string& _internal_voter_name() const;
  void _internal_set_voter_name(const std::string& value);
  std::string* _internal_mutable_voter_name();
  public:

  // @@protoc_insertion_point(class_scope:potechi.VoteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > flavor_numbers_;
  mutable std::atomic<int> _flavor_numbers_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_potechi_2eproto;
};
// -------------------------------------------------------------------

class VoteReply_ResultEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VoteReply_ResultEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<VoteReply_ResultEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  VoteReply_ResultEntry_DoNotUse();
  explicit constexpr VoteReply_ResultEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit VoteReply_ResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const VoteReply_ResultEntry_DoNotUse& other);
  static const VoteReply_ResultEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const VoteReply_ResultEntry_DoNotUse*>(&_VoteReply_ResultEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "potechi.VoteReply.ResultEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_potechi_2eproto);
    return ::descriptor_table_potechi_2eproto.file_level_metadata[1];
  }

  public:
};

// -------------------------------------------------------------------

class VoteReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:potechi.VoteReply) */ {
 public:
  inline VoteReply() : VoteReply(nullptr) {}
  virtual ~VoteReply();
  explicit constexpr VoteReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VoteReply(const VoteReply& from);
  VoteReply(VoteReply&& from) noexcept
    : VoteReply() {
    *this = ::std::move(from);
  }

  inline VoteReply& operator=(const VoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline VoteReply& operator=(VoteReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VoteReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const VoteReply* internal_default_instance() {
    return reinterpret_cast<const VoteReply*>(
               &_VoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(VoteReply& a, VoteReply& b) {
    a.Swap(&b);
  }
  inline void Swap(VoteReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VoteReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VoteReply* New() const final {
    return CreateMaybeMessage<VoteReply>(nullptr);
  }

  VoteReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VoteReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VoteReply& from);
  void MergeFrom(const VoteReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VoteReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "potechi.VoteReply";
  }
  protected:
  explicit VoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_potechi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // map<string, int32> result = 1;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_result() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_result();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
      result() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_result();

  // @@protoc_insertion_point(class_scope:potechi.VoteReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      VoteReply_ResultEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_potechi_2eproto;
};
// -------------------------------------------------------------------

class CountingRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:potechi.CountingRequest) */ {
 public:
  inline CountingRequest() : CountingRequest(nullptr) {}
  virtual ~CountingRequest();
  explicit constexpr CountingRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CountingRequest(const CountingRequest& from);
  CountingRequest(CountingRequest&& from) noexcept
    : CountingRequest() {
    *this = ::std::move(from);
  }

  inline CountingRequest& operator=(const CountingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountingRequest& operator=(CountingRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountingRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountingRequest* internal_default_instance() {
    return reinterpret_cast<const CountingRequest*>(
               &_CountingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(CountingRequest& a, CountingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CountingRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountingRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountingRequest* New() const final {
    return CreateMaybeMessage<CountingRequest>(nullptr);
  }

  CountingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountingRequest& from);
  void MergeFrom(const CountingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "potechi.CountingRequest";
  }
  protected:
  explicit CountingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_potechi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVoterNameFieldNumber = 1,
  };
  // string voter_name = 1;
  void clear_voter_name();
  const std::string& voter_name() const;
  void set_voter_name(const std::string& value);
  void set_voter_name(std::string&& value);
  void set_voter_name(const char* value);
  void set_voter_name(const char* value, size_t size);
  std::string* mutable_voter_name();
  std::string* release_voter_name();
  void set_allocated_voter_name(std::string* voter_name);
  private:
  const std::string& _internal_voter_name() const;
  void _internal_set_voter_name(const std::string& value);
  std::string* _internal_mutable_voter_name();
  public:

  // @@protoc_insertion_point(class_scope:potechi.CountingRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr voter_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_potechi_2eproto;
};
// -------------------------------------------------------------------

class CountingReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:potechi.CountingReply) */ {
 public:
  inline CountingReply() : CountingReply(nullptr) {}
  virtual ~CountingReply();
  explicit constexpr CountingReply(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CountingReply(const CountingReply& from);
  CountingReply(CountingReply&& from) noexcept
    : CountingReply() {
    *this = ::std::move(from);
  }

  inline CountingReply& operator=(const CountingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CountingReply& operator=(CountingReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CountingReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CountingReply* internal_default_instance() {
    return reinterpret_cast<const CountingReply*>(
               &_CountingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CountingReply& a, CountingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CountingReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CountingReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CountingReply* New() const final {
    return CreateMaybeMessage<CountingReply>(nullptr);
  }

  CountingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CountingReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CountingReply& from);
  void MergeFrom(const CountingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CountingReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "potechi.CountingReply";
  }
  protected:
  explicit CountingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_potechi_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kContributionRateFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // double contribution_rate = 1;
  void clear_contribution_rate();
  double contribution_rate() const;
  void set_contribution_rate(double value);
  private:
  double _internal_contribution_rate() const;
  void _internal_set_contribution_rate(double value);
  public:

  // @@protoc_insertion_point(class_scope:potechi.CountingReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  double contribution_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_potechi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VoteRequest

// repeated int32 flavor_numbers = 1;
inline int VoteRequest::_internal_flavor_numbers_size() const {
  return flavor_numbers_.size();
}
inline int VoteRequest::flavor_numbers_size() const {
  return _internal_flavor_numbers_size();
}
inline void VoteRequest::clear_flavor_numbers() {
  flavor_numbers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VoteRequest::_internal_flavor_numbers(int index) const {
  return flavor_numbers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VoteRequest::flavor_numbers(int index) const {
  // @@protoc_insertion_point(field_get:potechi.VoteRequest.flavor_numbers)
  return _internal_flavor_numbers(index);
}
inline void VoteRequest::set_flavor_numbers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  flavor_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:potechi.VoteRequest.flavor_numbers)
}
inline void VoteRequest::_internal_add_flavor_numbers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  flavor_numbers_.Add(value);
}
inline void VoteRequest::add_flavor_numbers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_flavor_numbers(value);
  // @@protoc_insertion_point(field_add:potechi.VoteRequest.flavor_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VoteRequest::_internal_flavor_numbers() const {
  return flavor_numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VoteRequest::flavor_numbers() const {
  // @@protoc_insertion_point(field_list:potechi.VoteRequest.flavor_numbers)
  return _internal_flavor_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VoteRequest::_internal_mutable_flavor_numbers() {
  return &flavor_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VoteRequest::mutable_flavor_numbers() {
  // @@protoc_insertion_point(field_mutable_list:potechi.VoteRequest.flavor_numbers)
  return _internal_mutable_flavor_numbers();
}

// string voter_name = 2;
inline void VoteRequest::clear_voter_name() {
  voter_name_.ClearToEmpty();
}
inline const std::string& VoteRequest::voter_name() const {
  // @@protoc_insertion_point(field_get:potechi.VoteRequest.voter_name)
  return _internal_voter_name();
}
inline void VoteRequest::set_voter_name(const std::string& value) {
  _internal_set_voter_name(value);
  // @@protoc_insertion_point(field_set:potechi.VoteRequest.voter_name)
}
inline std::string* VoteRequest::mutable_voter_name() {
  // @@protoc_insertion_point(field_mutable:potechi.VoteRequest.voter_name)
  return _internal_mutable_voter_name();
}
inline const std::string& VoteRequest::_internal_voter_name() const {
  return voter_name_.Get();
}
inline void VoteRequest::_internal_set_voter_name(const std::string& value) {
  
  voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void VoteRequest::set_voter_name(std::string&& value) {
  
  voter_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:potechi.VoteRequest.voter_name)
}
inline void VoteRequest::set_voter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:potechi.VoteRequest.voter_name)
}
inline void VoteRequest::set_voter_name(const char* value,
    size_t size) {
  
  voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:potechi.VoteRequest.voter_name)
}
inline std::string* VoteRequest::_internal_mutable_voter_name() {
  
  return voter_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* VoteRequest::release_voter_name() {
  // @@protoc_insertion_point(field_release:potechi.VoteRequest.voter_name)
  return voter_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VoteRequest::set_allocated_voter_name(std::string* voter_name) {
  if (voter_name != nullptr) {
    
  } else {
    
  }
  voter_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voter_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:potechi.VoteRequest.voter_name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// VoteReply

// map<string, int32> result = 1;
inline int VoteReply::_internal_result_size() const {
  return result_.size();
}
inline int VoteReply::result_size() const {
  return _internal_result_size();
}
inline void VoteReply::clear_result() {
  result_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
VoteReply::_internal_result() const {
  return result_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >&
VoteReply::result() const {
  // @@protoc_insertion_point(field_map:potechi.VoteReply.result)
  return _internal_result();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
VoteReply::_internal_mutable_result() {
  return result_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >*
VoteReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable_map:potechi.VoteReply.result)
  return _internal_mutable_result();
}

// -------------------------------------------------------------------

// CountingRequest

// string voter_name = 1;
inline void CountingRequest::clear_voter_name() {
  voter_name_.ClearToEmpty();
}
inline const std::string& CountingRequest::voter_name() const {
  // @@protoc_insertion_point(field_get:potechi.CountingRequest.voter_name)
  return _internal_voter_name();
}
inline void CountingRequest::set_voter_name(const std::string& value) {
  _internal_set_voter_name(value);
  // @@protoc_insertion_point(field_set:potechi.CountingRequest.voter_name)
}
inline std::string* CountingRequest::mutable_voter_name() {
  // @@protoc_insertion_point(field_mutable:potechi.CountingRequest.voter_name)
  return _internal_mutable_voter_name();
}
inline const std::string& CountingRequest::_internal_voter_name() const {
  return voter_name_.Get();
}
inline void CountingRequest::_internal_set_voter_name(const std::string& value) {
  
  voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CountingRequest::set_voter_name(std::string&& value) {
  
  voter_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:potechi.CountingRequest.voter_name)
}
inline void CountingRequest::set_voter_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:potechi.CountingRequest.voter_name)
}
inline void CountingRequest::set_voter_name(const char* value,
    size_t size) {
  
  voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:potechi.CountingRequest.voter_name)
}
inline std::string* CountingRequest::_internal_mutable_voter_name() {
  
  return voter_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CountingRequest::release_voter_name() {
  // @@protoc_insertion_point(field_release:potechi.CountingRequest.voter_name)
  return voter_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CountingRequest::set_allocated_voter_name(std::string* voter_name) {
  if (voter_name != nullptr) {
    
  } else {
    
  }
  voter_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), voter_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:potechi.CountingRequest.voter_name)
}

// -------------------------------------------------------------------

// CountingReply

// double contribution_rate = 1;
inline void CountingReply::clear_contribution_rate() {
  contribution_rate_ = 0;
}
inline double CountingReply::_internal_contribution_rate() const {
  return contribution_rate_;
}
inline double CountingReply::contribution_rate() const {
  // @@protoc_insertion_point(field_get:potechi.CountingReply.contribution_rate)
  return _internal_contribution_rate();
}
inline void CountingReply::_internal_set_contribution_rate(double value) {
  
  contribution_rate_ = value;
}
inline void CountingReply::set_contribution_rate(double value) {
  _internal_set_contribution_rate(value);
  // @@protoc_insertion_point(field_set:potechi.CountingReply.contribution_rate)
}

// string message = 2;
inline void CountingReply::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& CountingReply::message() const {
  // @@protoc_insertion_point(field_get:potechi.CountingReply.message)
  return _internal_message();
}
inline void CountingReply::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:potechi.CountingReply.message)
}
inline std::string* CountingReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:potechi.CountingReply.message)
  return _internal_mutable_message();
}
inline const std::string& CountingReply::_internal_message() const {
  return message_.Get();
}
inline void CountingReply::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CountingReply::set_message(std::string&& value) {
  
  message_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:potechi.CountingReply.message)
}
inline void CountingReply::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:potechi.CountingReply.message)
}
inline void CountingReply::set_message(const char* value,
    size_t size) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:potechi.CountingReply.message)
}
inline std::string* CountingReply::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CountingReply::release_message() {
  // @@protoc_insertion_point(field_release:potechi.CountingReply.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CountingReply::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:potechi.CountingReply.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace potechi

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_potechi_2eproto
