// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: potechi.proto

#include "potechi.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace potechi {
constexpr VoteRequest::VoteRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flavor_numbers_()
  , _flavor_numbers_cached_byte_size_()
  , voter_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct VoteRequestDefaultTypeInternal {
  constexpr VoteRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteRequestDefaultTypeInternal() {}
  union {
    VoteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteRequestDefaultTypeInternal _VoteRequest_default_instance_;
constexpr VoteReply_ResultEntry_DoNotUse::VoteReply_ResultEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct VoteReply_ResultEntry_DoNotUseDefaultTypeInternal {
  constexpr VoteReply_ResultEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteReply_ResultEntry_DoNotUseDefaultTypeInternal() {}
  union {
    VoteReply_ResultEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteReply_ResultEntry_DoNotUseDefaultTypeInternal _VoteReply_ResultEntry_DoNotUse_default_instance_;
constexpr VoteReply::VoteReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct VoteReplyDefaultTypeInternal {
  constexpr VoteReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VoteReplyDefaultTypeInternal() {}
  union {
    VoteReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VoteReplyDefaultTypeInternal _VoteReply_default_instance_;
constexpr CountingRequest::CountingRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : voter_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CountingRequestDefaultTypeInternal {
  constexpr CountingRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CountingRequestDefaultTypeInternal() {}
  union {
    CountingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CountingRequestDefaultTypeInternal _CountingRequest_default_instance_;
constexpr CountingReply::CountingReply(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , contribution_rate_(0){}
struct CountingReplyDefaultTypeInternal {
  constexpr CountingReplyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CountingReplyDefaultTypeInternal() {}
  union {
    CountingReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CountingReplyDefaultTypeInternal _CountingReply_default_instance_;
}  // namespace potechi
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_potechi_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_potechi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_potechi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_potechi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::potechi::VoteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::potechi::VoteRequest, flavor_numbers_),
  PROTOBUF_FIELD_OFFSET(::potechi::VoteRequest, voter_name_),
  PROTOBUF_FIELD_OFFSET(::potechi::VoteReply_ResultEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::potechi::VoteReply_ResultEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::potechi::VoteReply_ResultEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::potechi::VoteReply_ResultEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::potechi::VoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::potechi::VoteReply, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::potechi::CountingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::potechi::CountingRequest, voter_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::potechi::CountingReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::potechi::CountingReply, contribution_rate_),
  PROTOBUF_FIELD_OFFSET(::potechi::CountingReply, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::potechi::VoteRequest)},
  { 7, 14, sizeof(::potechi::VoteReply_ResultEntry_DoNotUse)},
  { 16, -1, sizeof(::potechi::VoteReply)},
  { 22, -1, sizeof(::potechi::CountingRequest)},
  { 28, -1, sizeof(::potechi::CountingReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::potechi::_VoteRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::potechi::_VoteReply_ResultEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::potechi::_VoteReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::potechi::_CountingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::potechi::_CountingReply_default_instance_),
};

const char descriptor_table_protodef_potechi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rpotechi.proto\022\007potechi\"9\n\013VoteRequest\022"
  "\026\n\016flavor_numbers\030\001 \003(\005\022\022\n\nvoter_name\030\002 "
  "\001(\t\"j\n\tVoteReply\022.\n\006result\030\001 \003(\0132\036.potec"
  "hi.VoteReply.ResultEntry\032-\n\013ResultEntry\022"
  "\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001\"%\n\017Count"
  "ingRequest\022\022\n\nvoter_name\030\001 \001(\t\";\n\rCounti"
  "ngReply\022\031\n\021contribution_rate\030\001 \001(\001\022\017\n\007me"
  "ssage\030\002 \001(\t2\201\001\n\007Potechi\0226\n\004Vote\022\024.potech"
  "i.VoteRequest\032\022.potechi.VoteReply\"\000(\0010\001\022"
  ">\n\010Counting\022\030.potechi.CountingRequest\032\026."
  "potechi.CountingReply\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_potechi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_potechi_2eproto = {
  false, false, 431, descriptor_table_protodef_potechi_2eproto, "potechi.proto", 
  &descriptor_table_potechi_2eproto_once, nullptr, 0, 5,
  schemas, file_default_instances, TableStruct_potechi_2eproto::offsets,
  file_level_metadata_potechi_2eproto, file_level_enum_descriptors_potechi_2eproto, file_level_service_descriptors_potechi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK ::PROTOBUF_NAMESPACE_ID::Metadata
descriptor_table_potechi_2eproto_metadata_getter(int index) {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_potechi_2eproto);
  return descriptor_table_potechi_2eproto.file_level_metadata[index];
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_potechi_2eproto(&descriptor_table_potechi_2eproto);
namespace potechi {

// ===================================================================

class VoteRequest::_Internal {
 public:
};

VoteRequest::VoteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  flavor_numbers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:potechi.VoteRequest)
}
VoteRequest::VoteRequest(const VoteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      flavor_numbers_(from.flavor_numbers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voter_name().empty()) {
    voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voter_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:potechi.VoteRequest)
}

void VoteRequest::SharedCtor() {
voter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

VoteRequest::~VoteRequest() {
  // @@protoc_insertion_point(destructor:potechi.VoteRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  voter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VoteRequest::ArenaDtor(void* object) {
  VoteRequest* _this = reinterpret_cast< VoteRequest* >(object);
  (void)_this;
}
void VoteRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:potechi.VoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flavor_numbers_.Clear();
  voter_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 flavor_numbers = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_flavor_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_flavor_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string voter_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_voter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "potechi.VoteRequest.voter_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:potechi.VoteRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 flavor_numbers = 1;
  {
    int byte_size = _flavor_numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_flavor_numbers(), byte_size, target);
    }
  }

  // string voter_name = 2;
  if (this->voter_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voter_name().data(), static_cast<int>(this->_internal_voter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "potechi.VoteRequest.voter_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_voter_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:potechi.VoteRequest)
  return target;
}

size_t VoteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:potechi.VoteRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 flavor_numbers = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->flavor_numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _flavor_numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string voter_name = 2;
  if (this->voter_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voter_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:potechi.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:potechi.VoteRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:potechi.VoteRequest)
    MergeFrom(*source);
  }
}

void VoteRequest::MergeFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:potechi.VoteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  flavor_numbers_.MergeFrom(from.flavor_numbers_);
  if (from.voter_name().size() > 0) {
    _internal_set_voter_name(from._internal_voter_name());
  }
}

void VoteRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:potechi.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteRequest::CopyFrom(const VoteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:potechi.VoteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteRequest::IsInitialized() const {
  return true;
}

void VoteRequest::InternalSwap(VoteRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  flavor_numbers_.InternalSwap(&other->flavor_numbers_);
  voter_name_.Swap(&other->voter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

VoteReply_ResultEntry_DoNotUse::VoteReply_ResultEntry_DoNotUse() {}
VoteReply_ResultEntry_DoNotUse::VoteReply_ResultEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void VoteReply_ResultEntry_DoNotUse::MergeFrom(const VoteReply_ResultEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata VoteReply_ResultEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void VoteReply_ResultEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class VoteReply::_Internal {
 public:
};

VoteReply::VoteReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  result_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:potechi.VoteReply)
}
VoteReply::VoteReply(const VoteReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_.MergeFrom(from.result_);
  // @@protoc_insertion_point(copy_constructor:potechi.VoteReply)
}

void VoteReply::SharedCtor() {
}

VoteReply::~VoteReply() {
  // @@protoc_insertion_point(destructor:potechi.VoteReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VoteReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VoteReply::ArenaDtor(void* object) {
  VoteReply* _this = reinterpret_cast< VoteReply* >(object);
  (void)_this;
}
void VoteReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:potechi.VoteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VoteReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // map<string, int32> result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&result_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VoteReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:potechi.VoteReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, int32> result = 1;
  if (!this->_internal_result().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "potechi.VoteReply.ResultEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_result().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_result().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_result().begin();
          it != this->_internal_result().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = VoteReply_ResultEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
          it = this->_internal_result().begin();
          it != this->_internal_result().end(); ++it) {
        target = VoteReply_ResultEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:potechi.VoteReply)
  return target;
}

size_t VoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:potechi.VoteReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, int32> result = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_result_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::int32 >::const_iterator
      it = this->_internal_result().begin();
      it != this->_internal_result().end(); ++it) {
    total_size += VoteReply_ResultEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VoteReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:potechi.VoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const VoteReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VoteReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:potechi.VoteReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:potechi.VoteReply)
    MergeFrom(*source);
  }
}

void VoteReply::MergeFrom(const VoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:potechi.VoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  result_.MergeFrom(from.result_);
}

void VoteReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:potechi.VoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VoteReply::CopyFrom(const VoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:potechi.VoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VoteReply::IsInitialized() const {
  return true;
}

void VoteReply::InternalSwap(VoteReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  result_.Swap(&other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VoteReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CountingRequest::_Internal {
 public:
};

CountingRequest::CountingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:potechi.CountingRequest)
}
CountingRequest::CountingRequest(const CountingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  voter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_voter_name().empty()) {
    voter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_voter_name(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:potechi.CountingRequest)
}

void CountingRequest::SharedCtor() {
voter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

CountingRequest::~CountingRequest() {
  // @@protoc_insertion_point(destructor:potechi.CountingRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CountingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  voter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CountingRequest::ArenaDtor(void* object) {
  CountingRequest* _this = reinterpret_cast< CountingRequest* >(object);
  (void)_this;
}
void CountingRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CountingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CountingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:potechi.CountingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  voter_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CountingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string voter_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_voter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "potechi.CountingRequest.voter_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CountingRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:potechi.CountingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string voter_name = 1;
  if (this->voter_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_voter_name().data(), static_cast<int>(this->_internal_voter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "potechi.CountingRequest.voter_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_voter_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:potechi.CountingRequest)
  return target;
}

size_t CountingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:potechi.CountingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string voter_name = 1;
  if (this->voter_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_voter_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:potechi.CountingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const CountingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CountingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:potechi.CountingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:potechi.CountingRequest)
    MergeFrom(*source);
  }
}

void CountingRequest::MergeFrom(const CountingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:potechi.CountingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.voter_name().size() > 0) {
    _internal_set_voter_name(from._internal_voter_name());
  }
}

void CountingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:potechi.CountingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountingRequest::CopyFrom(const CountingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:potechi.CountingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountingRequest::IsInitialized() const {
  return true;
}

void CountingRequest::InternalSwap(CountingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  voter_name_.Swap(&other->voter_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata CountingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CountingReply::_Internal {
 public:
};

CountingReply::CountingReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:potechi.CountingReply)
}
CountingReply::CountingReply(const CountingReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArena());
  }
  contribution_rate_ = from.contribution_rate_;
  // @@protoc_insertion_point(copy_constructor:potechi.CountingReply)
}

void CountingReply::SharedCtor() {
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
contribution_rate_ = 0;
}

CountingReply::~CountingReply() {
  // @@protoc_insertion_point(destructor:potechi.CountingReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CountingReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CountingReply::ArenaDtor(void* object) {
  CountingReply* _this = reinterpret_cast< CountingReply* >(object);
  (void)_this;
}
void CountingReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CountingReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CountingReply::Clear() {
// @@protoc_insertion_point(message_clear_start:potechi.CountingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  contribution_rate_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CountingReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double contribution_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          contribution_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // string message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "potechi.CountingReply.message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CountingReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:potechi.CountingReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double contribution_rate = 1;
  if (!(this->contribution_rate() <= 0 && this->contribution_rate() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_contribution_rate(), target);
  }

  // string message = 2;
  if (this->message().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "potechi.CountingReply.message");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:potechi.CountingReply)
  return target;
}

size_t CountingReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:potechi.CountingReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 2;
  if (this->message().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // double contribution_rate = 1;
  if (!(this->contribution_rate() <= 0 && this->contribution_rate() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CountingReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:potechi.CountingReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CountingReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CountingReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:potechi.CountingReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:potechi.CountingReply)
    MergeFrom(*source);
  }
}

void CountingReply::MergeFrom(const CountingReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:potechi.CountingReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message().size() > 0) {
    _internal_set_message(from._internal_message());
  }
  if (!(from.contribution_rate() <= 0 && from.contribution_rate() >= 0)) {
    _internal_set_contribution_rate(from._internal_contribution_rate());
  }
}

void CountingReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:potechi.CountingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountingReply::CopyFrom(const CountingReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:potechi.CountingReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountingReply::IsInitialized() const {
  return true;
}

void CountingReply::InternalSwap(CountingReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(contribution_rate_, other->contribution_rate_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CountingReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace potechi
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::potechi::VoteRequest* Arena::CreateMaybeMessage< ::potechi::VoteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::potechi::VoteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::potechi::VoteReply_ResultEntry_DoNotUse* Arena::CreateMaybeMessage< ::potechi::VoteReply_ResultEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::potechi::VoteReply_ResultEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::potechi::VoteReply* Arena::CreateMaybeMessage< ::potechi::VoteReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::potechi::VoteReply >(arena);
}
template<> PROTOBUF_NOINLINE ::potechi::CountingRequest* Arena::CreateMaybeMessage< ::potechi::CountingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::potechi::CountingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::potechi::CountingReply* Arena::CreateMaybeMessage< ::potechi::CountingReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::potechi::CountingReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
